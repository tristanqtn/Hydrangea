name: CI / Release

on:
  push:
    branches: [ main ]
    tags:    [ 'v*' ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  changes:
    name: Detect client changes
    runs-on: ubuntu-latest
    outputs:
      clients_changed: ${{ steps.filter.outputs.clients }}
      clients_files:   ${{ steps.filter.outputs.clients_files }}
    steps:
      - name: Checkout (full history + tags)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Paths Changes Filter
        id: filter
        uses: dorny/paths-filter@v3.0.2
        with:
          ref:  ${{ github.sha }}
          base: ${{ github.event.before }}
          list-files: json
          initial-fetch-depth: 200
          filters: |
            clients:
              - 'clients/**'

      - name: Log changed client files (debug)
        run: |
          echo "clients_changed=${{ steps.filter.outputs.clients }}"
          echo "clients_files=${{ steps.filter.outputs.clients_files }}"

  build:
    name: Build (${{ matrix.target.name }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target:
          - { name: linux,   flake_attr: hydrangea-client-linux }
          - { name: windows, flake_attr: hydrangea-client-windows }

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Nix
        uses: cachix/install-nix-action@v31
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          github_access_token: ${{ secrets.GITHUB_TOKEN }}

      - id: build
        name: Nix build (${{ matrix.target.flake_attr }})
        shell: bash
        run: |
          set -euo pipefail
          OUT="$(nix build ".#${{ matrix.target.flake_attr }}" --print-out-paths | tail -n1)"
          echo "out=${OUT}" >> "$GITHUB_OUTPUT"

      - id: discover
        name: Locate produced binary
        shell: bash
        run: |
          set -euo pipefail
          OUT="${{ steps.build.outputs.out }}"
          BIN_PATH="$(find "${OUT}/bin" -maxdepth 1 -type f -perm -111 | head -n1)"
          if [[ -z "${BIN_PATH}" ]]; then
            echo "No executable found in ${OUT}/bin" >&2
            exit 1
          fi
          BIN_NAME="$(basename "${BIN_PATH}")"
          echo "bin_path=${BIN_PATH}" >> "$GITHUB_OUTPUT"
          echo "bin_name=${BIN_NAME}" >> "$GITHUB_OUTPUT"

      - name: Upload artifact (${{ steps.discover.outputs.bin_name }}-${{ matrix.target.name }})
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.discover.outputs.bin_name }}-${{ matrix.target.name }}
          path: ${{ steps.discover.outputs.bin_path }}

  release:
    name: Release
    needs: [ changes, build ]
    if: startsWith(github.ref, 'refs/tags/') && needs.changes.outputs.clients_changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          merge-multiple: false

      - name: Show downloaded tree (debug)
        run: |
          echo "---- artifacts/ content ----"
          ls -lahR artifacts || true

      - name: Prepare release assets (rename, checksums)
        id: prep
        shell: bash
        run: |
          set -euo pipefail
          TAG="${GITHUB_REF_NAME}"
          mkdir -p release
          shopt -s nullglob

          for d in artifacts/*; do
            [[ -d "$d" ]] || continue
            f="$(find "$d" -maxdepth 1 -type f -perm -111 | head -n1 || true)"
            [[ -n "$f" ]] || continue

            base="$(basename "$d")"
            os_hint=""
            [[ "$base" == *linux* ]]   && os_hint="linux"
            [[ "$base" == *windows* ]] && os_hint="windows"

            ext=""
            [[ "$os_hint" == "windows" && "$f" != *.exe ]] && ext=".exe"
            out="release/hydrangea-client-${os_hint}-${TAG}${ext}"

            cp "$f" "$out"
            chmod +x "$out" || true
          done

          count=$(ls -1 release 2>/dev/null | wc -l || echo 0)
          if [[ "$count" -eq 0 ]]; then
            echo "No release assets found in artifacts/*" >&2
            exit 1
          fi

          (cd release && sha256sum * > SHA256SUMS.txt)
          echo "release_dir=$(pwd)/release" >> "$GITHUB_OUTPUT"

      - name: List release payload
        run: ls -lah ${{ steps.prep.outputs.release_dir }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          fail_on_unmatched_files: true
          files: |
            ${{ steps.prep.outputs.release_dir }}/*
